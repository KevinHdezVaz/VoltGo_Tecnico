import 'dart:async';
import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/services.dart';

class NotificationService {
  static AudioPlayer? _player;
  static bool _isPlaying = false;
  static bool _isLooping = false;
  static bool _isDisposed = false;
  static Timer? _vibrationTimer;

  // Inicializar el player de forma lazy
  static AudioPlayer _getPlayer() {
    if (_player == null || _isDisposed) {
      _player = AudioPlayer();
      _isDisposed = false;
      print('üéµ AudioPlayer inicializado');
    }
    return _player!;
  }

  /// Reproduce sonido y vibraci√≥n para notificaciones
  static Future<void> playNotification({
    bool loop = false,
    bool includeVibration = true,
    VibrationPattern vibrationPattern = VibrationPattern.incoming,
  }) async {
    try {
      // Verificar si ya est√° reproduciendo el mismo tipo de sonido
      if (_isPlaying && loop == _isLooping) {
        print('üéµ Ya est√° reproduciendo el mismo tipo de notificaci√≥n');
        return;
      }

      print('üéµ Iniciando notificaci√≥n (sonido: ‚úì, vibraci√≥n: $includeVibration, loop: $loop)');

      final player = _getPlayer();
      
      // Detener cualquier reproducci√≥n actual
      if (_isPlaying) {
        await stop();
        await Future.delayed(const Duration(milliseconds: 100));
      }

      _isPlaying = true;
      _isLooping = loop;

      // Iniciar vibraci√≥n si est√° habilitada
      if (includeVibration) {
        _startVibration(vibrationPattern, loop);
      }

      if (loop) {
        // Modo loop
        await player.setReleaseMode(ReleaseMode.loop);
        await player.play(AssetSource('sounds/sonido.mp3'));
        print('üîÑ Notificaci√≥n en modo loop iniciada');
      } else {
        // Modo normal (una sola vez)
        await player.setReleaseMode(ReleaseMode.stop);
        await player.play(AssetSource('sounds/sonido.mp3'));
        print('‚ñ∂Ô∏è Notificaci√≥n normal iniciada');
        
        // Escuchar cuando termine la reproducci√≥n
        player.onPlayerComplete.listen((event) {
          _isPlaying = false;
          _isLooping = false;
          _stopVibration();
          print('‚úÖ Notificaci√≥n completada');
        });
      }
    } catch (e) {
      print('‚ùå Error reproduciendo notificaci√≥n: $e');
      _isPlaying = false;
      _isLooping = false;
      _stopVibration();
    }
  }

  /// Inicia la vibraci√≥n seg√∫n el patr√≥n especificado
  static void _startVibration(VibrationPattern pattern, bool loop) {
    _stopVibration(); // Detener vibraci√≥n anterior

    switch (pattern) {
      case VibrationPattern.incoming:
        _vibrateIncomingRequest(loop);
        break;
      case VibrationPattern.urgent:
        _vibrateUrgent(loop);
        break;
      case VibrationPattern.gentle:
        _vibrateGentle(loop);
        break;
      case VibrationPattern.single:
        HapticFeedback.heavyImpact();
        break;
    }
  }

  /// Patr√≥n de vibraci√≥n para solicitudes entrantes
  static void _vibrateIncomingRequest(bool loop) {
    // Vibraci√≥n inicial fuerte
    HapticFeedback.heavyImpact();
    
    if (loop) {
      _vibrationTimer = Timer.periodic(const Duration(seconds: 2), (timer) {
        HapticFeedback.heavyImpact();
        
        // Vibraci√≥n secundaria m√°s suave despu√©s de 300ms
        Future.delayed(const Duration(milliseconds: 300), () {
          HapticFeedback.mediumImpact();
        });
      });
    } else {
      // Solo una secuencia de vibraci√≥n
      Future.delayed(const Duration(milliseconds: 300), () {
        HapticFeedback.mediumImpact();
      });
      Future.delayed(const Duration(milliseconds: 600), () {
        HapticFeedback.lightImpact();
      });
    }
  }

  /// Patr√≥n de vibraci√≥n urgente (m√°s intenso)
  static void _vibrateUrgent(bool loop) {
    // Vibraci√≥n muy fuerte inicial
    HapticFeedback.heavyImpact();
    
    if (loop) {
      _vibrationTimer = Timer.periodic(const Duration(milliseconds: 1500), (timer) {
        // Secuencia de 3 vibraciones fuertes
        HapticFeedback.heavyImpact();
        Future.delayed(const Duration(milliseconds: 150), () {
          HapticFeedback.heavyImpact();
        });
        Future.delayed(const Duration(milliseconds: 300), () {
          HapticFeedback.heavyImpact();
        });
      });
    }
  }

  /// Patr√≥n de vibraci√≥n suave
  static void _vibrateGentle(bool loop) {
    HapticFeedback.lightImpact();
    
    if (loop) {
      _vibrationTimer = Timer.periodic(const Duration(seconds: 3), (timer) {
        HapticFeedback.lightImpact();
      });
    }
  }

  /// Detiene la vibraci√≥n
  static void _stopVibration() {
    _vibrationTimer?.cancel();
    _vibrationTimer = null;
  }

  /// Detiene tanto el sonido como la vibraci√≥n
  static Future<void> stop() async {
    try {
      if (_player != null && !_isDisposed) {
        print('‚èπÔ∏è Deteniendo notificaci√≥n...');
        await _player!.stop();
        _isPlaying = false;
        _isLooping = false;
        _stopVibration();
        print('‚úÖ Notificaci√≥n detenida');
      }
    } catch (e) {
      print('‚ùå Error deteniendo notificaci√≥n: $e');
    }
  }

  /// Libera los recursos
  static void dispose() {
    try {
      if (_player != null && !_isDisposed) {
        print('üóëÔ∏è Liberando NotificationService...');
        _player!.dispose();
        _player = null;
        _isDisposed = true;
        _isPlaying = false;
        _isLooping = false;
        _stopVibration();
        print('‚úÖ NotificationService liberado');
      }
    } catch (e) {
      print('‚ùå Error liberando NotificationService: $e');
    }
  }

  /// Reinicializa el servicio
  static void reinitialize() {
    if (_isDisposed || _player == null) {
      print('üîÑ Reinicializando NotificationService...');
      _player = AudioPlayer();
      _isDisposed = false;
      _isPlaying = false;
      _isLooping = false;
      _stopVibration();
    }
  }

  // M√©todos de estado
  static bool get isPlaying => _isPlaying;
  static bool get isLooping => _isLooping;
  static bool get isDisposed => _isDisposed;
  static bool get isVibrating => _vibrationTimer?.isActive ?? false;

  // M√©todos de conveniencia para diferentes tipos de notificaciones
  
  /// Notificaci√≥n para solicitudes entrantes (sonido + vibraci√≥n en loop)
  static Future<void> playIncomingRequestNotification() async {
    await playNotification(
      loop: true,
      includeVibration: false,
      vibrationPattern: VibrationPattern.incoming,
    );
  }

  /// Notificaci√≥n urgente (para cancelaciones o errores cr√≠ticos)
  static Future<void> playUrgentNotification() async {
    await playNotification(
      loop: false,
      includeVibration: true,
      vibrationPattern: VibrationPattern.urgent,
    );
  }

  /// Notificaci√≥n suave (para confirmaciones)
  static Future<void> playGentleNotification() async {
    await playNotification(
      loop: false,
      includeVibration: true,
      vibrationPattern: VibrationPattern.gentle,
    );
  }

  /// Solo vibraci√≥n (sin sonido)
  static void vibrateOnly(VibrationPattern pattern) {
    _startVibration(pattern, false);
  }
}

/// Enum para diferentes patrones de vibraci√≥n
enum VibrationPattern {
  incoming,    // Para solicitudes entrantes
  urgent,      // Para situaciones urgentes
  gentle,      // Para confirmaciones suaves
  single,      // Una sola vibraci√≥n
}